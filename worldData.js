// worldData.js
// Helper to load world data from the external JSON file
let worldData;

<!-- Fallback: JSON-Daten im HTML einbetten. Hier nur 2 Welten -->
  // Direkter Fallback als JavaScript-Objekt:
  const fallbackWorldData = {
  "galaxy": {
    "symbols": [
      "üßø",      "üï≥Ô∏è",      "‚úÆ",      "üé±",      "üåç",      "‚òæ",      "üåå",      "üåë",      "ü™ê",      "üåï",      "‚òÑÔ∏è",      "üí´",      "üöÄ",      "üõ∏",      "üå†",      "üåô",      "‚≠êÔ∏è",      "üåú",      "üåö"    ],
    "rare": [
      "üëæ",      "üëΩ",      "üéÆ",      "üë©‚ÄçüöÄ",      "üî´",      "üõ∞Ô∏è"
    ],
    "bottom": [
      "üî≠",      "üì°"
    ],
    "player": "üöÄ",
    "target": "üåç",
    "description": "Eine galaktische Welt voller Sterne und fremder Planeten.",
    "title": "Galaxie"
  }
};

async function loadWorldData() {
  if (worldData) return worldData;

  try {
    const response = await fetch('./worldData.json');
    if (!response.ok || !response.headers.get("content-type")?.includes("application/json")) {
      throw new Error("Kein JSON oder fetch fehlgeschlagen");
    }
    worldData = await response.json();
    console.log("Daten per fetch geladen.");
  } catch (err) {
    console.warn("Fetch fehlgeschlagen, nutze Fallback-Daten:", err);
    worldData = fallbackWorldData;
  }

  return worldData;
}


function validateWorldData(data) {
  const incompatibleEmojis = {
    "üßå": "Unicode 14.0",
    "ü´õ": "Unicode 14.0",
    "ü´ß": "Unicode 13.0",
    "ü™∏": "Unicode 14.0",
    "ü™∑": "Unicode 14.0",
    "ü´†": "Unicode 14.0",
    "ü´®": "Unicode 15.0",
    "ü™ª": "Unicode 15.0",
    "ü™º": "Unicode 15.0",
    "ü™Æ": "Unicode 13.0",
    "ü™µ": "Unicode 13.0",
    "üõó": "Unicode 13.0",
    "ü™¶": "Unicode 13.0",
    "ü™§": "Unicode 13.0",
    "ü™ú": "Unicode 13.0",
    "ü™õ": "Unicode 13.0",
    "ü™†": "Unicode 13.0",
    "ü©¥": "Unicode 13.0",
    "ü©≤": "Unicode 12.0",
    "ü™∫": "Unicode 15.0"
  };

  const issues = [];

  for (const [key, world] of Object.entries(data)) {
    const all = new Set();
    const duplicates = new Set();
    const sections = ["symbols", "rare", "bottom"];

    for (const sec of sections) {
      if (!Array.isArray(world[sec])) continue;
      for (const sym of world[sec]) {
        if (all.has(sym)) duplicates.add(sym);
        all.add(sym);

        if (incompatibleEmojis[sym]) {
          issues.push(`üö´ ${key}: Symbol '${sym}' in ${sec} ist evtl. inkompatibel (${incompatibleEmojis[sym]})`);
        }
      }
    }

    // Spieler- und Ziel-Symbol pr√ºfen
    const coreSymbols = ["player", "target", "monster"];
    for (const symField of coreSymbols) {
      const sym = world[symField];
      if (sym) {
        if (all.has(sym)) {
          issues.push(`‚ö†Ô∏è  ${key}: ${symField}-Symbol '${sym}' ist mehrfach vergeben`);
        }
        if (incompatibleEmojis[sym]) {
          issues.push(`üö´ ${key}: Symbol '${sym}' in ${symField} ist evtl. inkompatibel (${incompatibleEmojis[sym]})`);
        }
      } else {
        issues.push(`‚ùå ${key}: Symbol '${symField}' fehlt`);
      }
    }

    if (world.player === world.target) {
      issues.push(`‚ùå ${key}: Player und Target haben dasselbe Symbol '${world.player}'`);
    }

    if (!world.description || !world.title) {
      issues.push(`‚ÑπÔ∏è  ${key}: Beschreibung oder Titel fehlt`);
    }

    if (duplicates.size > 0) {
      issues.push(`üîÅ ${key}: doppelte Symbole gefunden: ${[...duplicates].join(', ')}`);
    }
  }

  if (issues.length > 0) {
    console.warn("‚ö†Ô∏è Symbolpr√ºfung abgeschlossen. Probleme gefunden:\n" + issues.join('\n'));
  } else {
    console.log("‚úÖ Symbolpr√ºfung: keine Konflikte gefunden.");
  }
}

